<?php
// Destroy any session if exists, just to be sure.
require $_SERVER['DOCUMENT_ROOT'].'/3severside/resetSession.php';
if (session_status () !== PHP_SESSION_ACTIVE) { reset_session(); }
else {;}

// Include the database connection file.
require $_SERVER['DOCUMENT_ROOT'] . '/3severside/database.php';

// somehow requested method is not POST, then redirect to error page
if (!$_SERVER["REQUEST_METHOD"] == "POST") { header("Location: errrrror.html"); exit;}

// Get username and password from form.
$username = $_POST['id'];
$password = $_POST['passwd'];

// Check if username and password are provided
if (empty($username) || empty($password)) {
	// then redirect to signin.php page with another error message
    header("Location: signin.php?error=empty_credential");
    exit;
} else if (hasSqlInjection($username) || hasSqlInjection($password)) {
	//header("Location: signin.php?error=sql_injection_detected");
}

// SQL query to fetch user details based on username
$sql = "SELECT * FROM Users WHERE uid = '$username' AND upw = '$password'";
$result = execute_query($sql); // Execute the SQL query using the function from database.php

// Check if username exists
if ($result->num_rows > 0) {
	// Fetch user details
	$row = $result->fetch_assoc();
	//$db_password = $row['upw'];

	/*
	// Verify password
	if ($password == $db_password) {
		// Password is correct, set session variables
		$_SESSION["userid"]   = $row['uid'];
		$_SESSION["username"] = $row['uname'];
		$_SESSION["usertype"] = "Customer"; 
		$_SESSION["hasSignedIn"] = true; 

		echo "<script>window.parent.location.href = '/'</script>";
		exit;
	}*/

	//inject me some sql here!
	$_SESSION["userid"]   = $row['uid'];
	$_SESSION["username"] = $row['uname'];
	$_SESSION["usertype"] = "Customer";
	//$_SESSION["acl"]      = $row['___'];
	$_SESSION["hasSignedIn"] = true; 

	echo $_SESSION["userid"]."</br>";
	echo $_SESSION["username"]."</br>";
	echo $_SESSION["usertype"]."</br>";
	//echo $_SESSION["acl"]."</br>";
	echo $_SESSION["hasSignedIn"]."</br>";

	echo "<script>window.parent.location.href = '/'</script>";
	exit;
	// vulnerable part ends here.
} 
header("Location: signin.php?error=invalid_credentials");
exit;


function hasSqlInjection($input) {
    // Define patterns commonly used in SQL injection attacks
    $patterns = array(
        '/\b(union|select|insert|update|delete|from|where|order by|group by|having|and|or)\b/i',
        '/\b(base64_|file_|data:|php|shell_exec|exec|system|passthru|popen|proc_open|pcntl_exec|eval|assert|preg_replace|create_function)\b/i',
        '/(--|#|\/\*\!|\*\/|@@|char\(|concat\(|substring\(|substr\(|mid\(|ascii\(|ord\(|hex\(|bin\(|oct\(|ifnull\(|if\()/i'
    );

    // Check if any of the patterns match the input
    foreach ($patterns as $pattern) {
        if (preg_match($pattern, $input)) {
            return true; // SQL injection pattern detected
        }
    }

    return false; // No SQL injection pattern detected
}
?>
