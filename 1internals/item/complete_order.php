<?php
require_once $_SERVER['DOCUMENT_ROOT'].'/3severside/database.php';
session_start();
// Show me the money i mean error
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

// Check session.
if (!isset($_SESSION['hasSignedIn']) || $_SESSION['usertype'] != 'Customer') {
    echo "Session error or user type is not customer. Redirecting...";
    header("Location: /?target=signin");
    exit;
}

// Fetch uno from Users table using uid
$userid = $_SESSION['userid'];
$userResult = execute_query("SELECT uno FROM Users WHERE uid = '$userid'");
if ($userResult && $userResult->num_rows > 0) {
    $userRow = $userResult->fetch_assoc();
    $uno = $userRow['uno'];
    echo "Uno fetched successfully: $uno </br>";
} else {
    echo "Failed to fetch uno. Redirecting...";
    header("Location: /error.html");
    exit;
}

// Get the selected shipping address
if (isset($_POST['shipping_address'])) {
    $shipping_address = $_POST['shipping_address'];
    echo "Shipping address selected: $shipping_address</br>";
} else {
    echo "No shipping address selected. Redirecting...";
    header("Location: /error.html");
    exit;
}

// Get the selected payment method
if (isset($_POST['payment_method'])) {
    $payment_method = $_POST['payment_method'];
    echo "Payment method selected: $payment_method</br>";
} else {
    echo "No payment method selected. Redirecting...";
    header("Location: /error.html");
    exit;
}

// Get the payment information based on the selected method
if (isset($_POST['payment_info'])) {
    $payment_info = $_POST['payment_info'];
    echo "Payment info provided: $payment_info</br>";
} else {
    $payment_info = "";
    echo "No payment info provided.";
}

$orderTotalPrice = 0;
// Fetch the items from the POST request
if (isset($_POST['items']) && is_array($_POST['items'])) {
    $items = $_POST['items'];
    echo "Items fetched successfully:</br>";
    foreach ($items as $dno => $item) {
        echo "Item DNO: $dno, Name: {$item['name']}, Amount: {$item['amount']}, Price: {$item['price']}</br>";
        $orderTotalPrice += $item['price'];
    }
} else {
    echo "No items found in the request. Redirecting...";
    //header("Location: /error.html");
    exit;
}

echo "</br>";
echo "All post parameters:";
print_r($_POST);
//exit; // not sending sqls yet. lets check all post parameters before proceed.
echo "</br>";echo "</br>";

//$orderTotalPrice = isset($_POST['orderTotalPrice']) ? (int)$_POST['orderTotalPrice'] : 0;
$shippingAddress = isset($_POST['shipping_address']) ? (int)$_POST['shipping_address'] : 0;
$paymentMethod = isset($_POST['payment_method']) ? $_POST['payment_method'] : '';
$paymentInfo = isset($_POST['payment_info']) ? $_POST['payment_info'] : '';
$items = isset($_POST['items']) ? $_POST['items'] : [];

echo "orderTotalPrice: ".$orderTotalPrice."</br>";
echo "shippingAddress: ".$shippingAddress."</br>";
echo "paymentMethod: ".$paymentMethod."</br>";
echo "paymentInfo: ".$paymentInfo."</br>";
echo "items: ".$items."</br>";

echo "</br>";echo "</br>";echo "</br>";echo "</br>";echo "</br>";echo "</br>";


// Insert into Transactions table
$tnote = $payment_info;
// tno, ttype, tamo, tstat, tnote
$insertTransactionQuery = "INSERT INTO Transactions (ttype, tamo, tnote) VALUES ('$payment_method', '$orderTotalPrice', '$tnote')";
echo $insertTransactionQuery;
echo "</br>";

$insertTransactionResult = execute_query($insertTransactionQuery);

if (!$insertTransactionResult) 
{
    echo "Error processing transaction. Please try again.";
    exit();
}
// Get the generated tno
$tnoResult = execute_query("SELECT tno FROM Transactions WHERE ttype=('$payment_method') AND tamo=('$orderTotalPrice') AND tnote=('$tnote')");
if (!$tnoResult) 
{
    echo "Error processing transaction. Please try again.";
    exit();
}
$tnoRow = $tnoResult->fetch_assoc();
$tno = $tnoRow['tno'];
echo "Transaction inserted successfully. TNO: $tno";
echo "</br>";echo "</br>";



// Insert into Orders table
$odate = date('Y-m-d');
$ostat = true; // Assuming the order status needs to be set here
// Create orders and update stock
foreach ($items as $dno => $item) {
    $iname = $item['name'];
    $amount = $item['amount'];
    $price = $item['price'];

    // Check stock availability
    $itemResult = execute_query("SELECT istock FROM Items WHERE ino = (SELECT ino FROM Descriptions WHERE dno = '$dno')");
    if ($itemResult && $itemResult->num_rows > 0) {
        $itemRow = $itemResult->fetch_assoc();
        $stock = $itemRow['istock'];

        if ($amount > $stock) {
            execute_query("ROLLBACK");
            echo "Error: Insufficient stock for item: $iname.";
            exit;
        }

        // Insert order
        $insertOrderQuery = "INSERT INTO Orders (uno, ino, shno, tno, oamo, odate, ostat) VALUES ('$uno', (SELECT ino FROM Descriptions WHERE dno = '$dno'), '$shippingAddress', '$tno', '$amount', CURDATE(), 0)";
        echo $insertOrderQuery;
        echo "</br>";

        
        $orderResult = execute_query($insertOrderQuery);
        if (!$orderResult) {
            execute_query("ROLLBACK");
            echo "Error: Unable to create order for item: $iname.";
            exit;
        }
        

        // Update stock
        $newStock = $stock - $amount;
        $updateStockQuery = "UPDATE Items SET istock = $newStock WHERE ino = (SELECT ino FROM Descriptions WHERE dno = '$dno')";
        
        echo $updateStockQuery;
        echo "</br>";
        
        $updateStockResult = execute_query($updateStockQuery);
        if (!$updateStockResult) {
            execute_query("ROLLBACK");
            echo "Error: Unable to update stock for item: $iname.";
            exit;
        }
        
    } else {
        execute_query("ROLLBACK");
        echo "Error: Item not found: $iname.";
        exit;
    }

}



// for the reference
/*
Uno fetched successfully: 4
Shipping address selected: 1
Payment method selected: credit
Payment info provided: ads
Items fetched successfully:
Item DNO: 268, Name: Invisibility Cloak, Amount: 116, Price: 3311
Item DNO: 403, Name: Cleansweep Five, Amount: 12, Price: 55
Item DNO: 221, Name: Felix Felicis, Amount: 7, Price: 3200
Item DNO: 413, Name: Niffler, Amount: 6, Price: 36
Item DNO: 587, Name: Expelliarmus, Amount: 2, Price: 100
Item DNO: 619, Name: Resurrection Stone, Amount: 1, Price: 9999
Item DNO: 269, Name: Wizard Robe, Amount: 1, Price: 11
All post parameters:Array ( 
    [shipping_address] => 1 
    [payment_method] => credit 
    [payment_info] => ads 
    [items] => Array ( 
        [268] => Array ( 
            [name] => Invisibility Cloak 
            [amount] => 116 
            [price] => 3311 
        ) 
        [403] => Array ( 
            [name] => Cleansweep Five 
            [amount] => 12 
            [price] => 55 
        ) 
        [221] => Array ( 
            [name] => Felix Felicis 
            [amount] => 7 
            [price] => 3200 
        ) 
        [413] => Array ( 
            [name] => Niffler 
            [amount] => 6 
            [price] => 36 
        ) 
        [587] => Array ( 
            [name] => Expelliarmus 
            [amount] => 2 [price] => 100 
        ) 
        [619] => Array ( 
            [name] => Resurrection Stone 
            [amount] => 1 
            [price] => 9999 
        ) 
        [269] => Array ( 
            [name] => Wizard Robe 
            [amount] => 1 
            [price] => 11 ) 
        ) 
    )
*/
?>
<script> 
    window.parent.location.href = '/?target=mypage';
</script>